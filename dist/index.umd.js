(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.AsciidoctorDocBook = factory());
})(this, (function () { 'use strict';

  const AsciidoctorDocBook = {};

  function register () {
  Opal.queue(function(Opal) {/* Generated by Opal 1.7.3 */
    var $module = Opal.module, $klass = Opal.klass, $const_set = Opal.const_set, $hash2 = Opal.hash2, $regexp = Opal.regexp, $def = Opal.def, $truthy = Opal.truthy, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $send = Opal.send, $alias = Opal.alias, $rb_gt = Opal.rb_gt, $return_val = Opal.return_val, $rb_minus = Opal.rb_minus, $to_ary = Opal.to_ary, $gvars = Opal.gvars, $not = Opal.not, $nesting = [], nil = Opal.nil, $$$ = Opal.$$$;

    Opal.add_stubs('register_for,default=,init_backend_traits,attr?,<<,attr,==,doctype,size,id,noheader,document_info_tag,apply_reftext_subs,+,map,empty?,docinfo,blocks?,content,id=,insert,common_attributes,join,content_only,document,[],sectname,option?,special,title,role,reftext,title_tag,enclose_content,skip,title?,each,items,text,style,text?,level,image_uri,alt,!,key?,attributes,to_i,index,subs,delete_at,>,unshift,asciimath_available?,to_mathml,parse,parent,warn,logger,context,error,content_model,blockquote_tag,has_role?,include?,columns,to_h,rows,colspan,column,-,rowspan,type,target,nil_or_empty?,get_root_document,generate_document_id,inspect,icon_uri,chop,private,gsub,strip,squeeze,firstname,sub_replacements,middlename,lastname,email,notitle,subtitle?,doctitle,main,subtitle,=~,header?,authors,author_tag,initials,cover_tag,nested?,parent_document,new,load_asciimath,nil?,require_library');
    return (function($base, $parent_nesting) {
      var self = $module($base, 'Asciidoctor');

      var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting);

      return (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'DocBook5Converter');

        var $nesting = [self].concat($parent_nesting), $$ = Opal.$r($nesting), $proto = self.$$prototype;

        $proto.asciimath_status = nil;
        
        self.$register_for("docbook5");
        $const_set($nesting[0], 'DLIST_TAGS', $hash2(["qanda", "glossary"], {"qanda": $hash2(["list", "entry", "label", "term", "item"], {"list": "qandaset", "entry": "qandaentry", "label": "question", "term": "simpara", "item": "answer"}), "glossary": $hash2(["list", "entry", "term", "item"], {"list": nil, "entry": "glossentry", "term": "glossterm", "item": "glossdef"})}))['$default=']($hash2(["list", "entry", "term", "item"], {"list": "variablelist", "entry": "varlistentry", "term": "term", "item": "listitem"}));
        $const_set($nesting[0], 'QUOTE_TAGS', $hash2(["monospaced", "emphasis", "strong", "double", "single", "mark", "superscript", "subscript"], {"monospaced": ["<literal>", "</literal>"], "emphasis": ["<emphasis>", "</emphasis>", true], "strong": ["<emphasis role=\"strong\">", "</emphasis>", true], "double": ["<quote>", "</quote>", true], "single": ["<quote>", "</quote>", true], "mark": ["<emphasis role=\"marked\">", "</emphasis>"], "superscript": ["<superscript>", "</superscript>"], "subscript": ["<subscript>", "</subscript>"]}))['$default='](["", "", true]);
        $const_set($nesting[0], 'MANPAGE_SECTION_TAGS', $hash2(["section", "synopsis"], {"section": "refsection", "synopsis": "refsynopsisdiv"}));
        $const_set($nesting[0], 'TABLE_PI_NAMES', ["dbhtml", "dbfo", "dblatex"]);
        $const_set($nesting[0], 'CopyrightRx', $regexp(["^(", $$('CC_ANY'), "+?)(?: ((?:\\d{4}-)?\\d{4}))?$"]));
        $const_set($nesting[0], 'ImageMacroRx', $regexp(["^image::?(\\S|\\S", $$('CC_ANY'), "*?\\S)\\[(", $$('CC_ANY'), "+)?\\]$"]));
        
        $def(self, '$initialize', function $$initialize(backend, opts) {
          var self = this;

          
          if (opts == null) opts = $hash2([], {});
          self.backend = backend;
          return self.$init_backend_traits($hash2(["basebackend", "filetype", "outfilesuffix", "supports_templates"], {"basebackend": "docbook", "filetype": "xml", "outfilesuffix": ".xml", "supports_templates": true}));
        }, -2);
        
        $def(self, '$convert_document', function $$convert_document(node) {
          var $a, $b, self = this, result = nil, lang_attribute = nil, root_tag_name = nil, manpage = nil, root_tag_idx = nil, id = nil, docinfo_content = nil;

          
          result = ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>"];
          if ($truthy(node['$attr?']("toc"))) {
            result['$<<'](($truthy(node['$attr?']("toclevels")) ? ("<?asciidoc-toc maxdepth=\"" + (node.$attr("toclevels")) + "\"?>") : ("<?asciidoc-toc?>")));
          }        if ($truthy(node['$attr?']("sectnums"))) {
            result['$<<'](($truthy(node['$attr?']("sectnumlevels")) ? ("<?asciidoc-numbered maxdepth=\"" + (node.$attr("sectnumlevels")) + "\"?>") : ("<?asciidoc-numbered?>")));
          }        lang_attribute = ($truthy(node['$attr?']("nolang")) ? ("") : (" xml:lang=\"" + (node.$attr("lang", "en")) + "\""));
          if ($eqeq((root_tag_name = node.$doctype()), "manpage")) {
            
            manpage = true;
            root_tag_name = "article";
          }        root_tag_idx = result.$size();
          id = node.$id();
          if (!$truthy(node.$noheader())) {
            result['$<<'](self.$document_info_tag(node));
          }        if ($truthy(manpage)) {
            
            result['$<<']("<refentry>");
            result['$<<']("<refmeta>");
            if ($truthy(node['$attr?']("mantitle"))) {
              result['$<<']("<refentrytitle>" + (node.$apply_reftext_subs(node.$attr("mantitle"))) + "</refentrytitle>");
            }          if ($truthy(node['$attr?']("manvolnum"))) {
              result['$<<']("<manvolnum>" + (node.$attr("manvolnum")) + "</manvolnum>");
            }          result['$<<']("<refmiscinfo class=\"source\">" + (node.$attr("mansource", "&#160;")) + "</refmiscinfo>");
            result['$<<']("<refmiscinfo class=\"manual\">" + (node.$attr("manmanual", "&#160;")) + "</refmiscinfo>");
            result['$<<']("</refmeta>");
            result['$<<']("<refnamediv>");
            if ($truthy(node['$attr?']("mannames"))) {
              result = $rb_plus(result, $send(node.$attr("mannames"), 'map', [], function $$1(n){
                
                if (n == null) n = nil;
                return "<refname>" + (n) + "</refname>";}));
            }          if ($truthy(node['$attr?']("manpurpose"))) {
              result['$<<']("<refpurpose>" + (node.$attr("manpurpose")) + "</refpurpose>");
            }          result['$<<']("</refnamediv>");
          }        if (!$truthy((docinfo_content = node.$docinfo("header"))['$empty?']())) {
            result['$<<'](docinfo_content);
          }        if ($truthy(node['$blocks?']())) {
            result['$<<'](node.$content());
          }        if (!$truthy((docinfo_content = node.$docinfo("footer"))['$empty?']())) {
            result['$<<'](docinfo_content);
          }        if ($truthy(manpage)) {
            result['$<<']("</refentry>");
          }        if (!$truthy(id)) {
            $a = [node.$id(), nil], (id = $a[0]), ($b = [$a[1]], $send(node, 'id=', $b), $b[$b.length - 1]);
          }        result.$insert(root_tag_idx, "<" + (root_tag_name) + " xmlns=\"http://docbook.org/ns/docbook\" xmlns:xl=\"http://www.w3.org/1999/xlink\" version=\"5.0\"" + (lang_attribute) + (self.$common_attributes(id)) + ">");
          result['$<<']("</" + (root_tag_name) + ">");
          return result.$join($$('LF'));
        });
        $alias(self, "convert_embedded", "content_only");
        
        $def(self, '$convert_section', function $$convert_section(node) {
          var self = this, tag_name = nil, $ret_or_1 = nil, title_el = nil;

          
          if ($eqeq(node.$document().$doctype(), "manpage")) {
            tag_name = ($truthy(($ret_or_1 = $$('MANPAGE_SECTION_TAGS')['$[]']((tag_name = node.$sectname())))) ? ($ret_or_1) : (tag_name));
          } else {
            tag_name = node.$sectname();
          }        title_el = (($truthy(node.$special()) && (($truthy(node['$option?']("notitle")) || ($truthy(node['$option?']("untitled")))))) ? ("") : ("<title>" + (node.$title()) + "</title>\n"));
          return "<" + (tag_name) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (title_el) + (node.$content()) + "\n" + "</" + (tag_name) + ">";
        });
        
        $def(self, '$convert_admonition', function $$convert_admonition(node) {
          var self = this, tag_name = nil;

          return "<" + ((tag_name = node.$attr("name"))) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$enclose_content(node)) + "\n" + "</" + (tag_name) + ">"
        });
        $alias(self, "convert_audio", "skip");
        
        $def(self, '$convert_colist', function $$convert_colist(node) {
          var self = this, result = nil;

          
          result = [];
          result['$<<']("<calloutlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
          if ($truthy(node['$title?']())) {
            result['$<<']("<title>" + (node.$title()) + "</title>");
          }        $send(node.$items(), 'each', [], function $$2(item){
            
            if (item == null) item = nil;
            result['$<<']("<callout arearefs=\"" + (item.$attr("coids")) + "\">");
            result['$<<']("<para>" + (item.$text()) + "</para>");
            if ($truthy(item['$blocks?']())) {
              result['$<<'](item.$content());
            }          return result['$<<']("</callout>");});
          result['$<<']("</calloutlist>");
          return result.$join($$('LF'));
        });
        
        $def(self, '$convert_dlist', function $$convert_dlist(node) {
          var self = this, result = nil, tag_name = nil, tags = nil, list_tag = nil, entry_tag = nil, label_tag = nil, term_tag = nil, item_tag = nil;

          
          result = [];
          if ($eqeq(node.$style(), "horizontal")) {
            
            result['$<<']("<" + ((tag_name = ($truthy(node['$title?']()) ? ("table") : ("informaltable")))) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " tabstyle=\"horizontal\" frame=\"none\" colsep=\"0\" rowsep=\"0\">\n" + (self.$title_tag(node)) + "<tgroup cols=\"2\">\n" + "<colspec colwidth=\"" + (node.$attr("labelwidth", 15)) + "*\"/>\n" + "<colspec colwidth=\"" + (node.$attr("itemwidth", 85)) + "*\"/>\n" + "<tbody valign=\"top\">");
            $send(node.$items(), 'each', [], function $$3(terms, dd){
              
              if (terms == null) terms = nil;
              if (dd == null) dd = nil;
              result['$<<']("<row>\n" + "<entry>");
              $send(terms, 'each', [], function $$4(dt){
                
                if (dt == null) dt = nil;
                return result['$<<']("<simpara>" + (dt.$text()) + "</simpara>");});
              result['$<<']("</entry>\n" + "<entry>");
              if ($truthy(dd)) {
                
                if ($truthy(dd['$text?']())) {
                  result['$<<']("<simpara>" + (dd.$text()) + "</simpara>");
                }              if ($truthy(dd['$blocks?']())) {
                  result['$<<'](dd.$content());
                }            }            return result['$<<']("</entry>\n" + "</row>");});
            result['$<<']("</tbody>\n" + "</tgroup>\n" + "</" + (tag_name) + ">");
          } else {
            
            tags = $$('DLIST_TAGS')['$[]'](node.$style());
            list_tag = tags['$[]']("list");
            entry_tag = tags['$[]']("entry");
            label_tag = tags['$[]']("label");
            term_tag = tags['$[]']("term");
            item_tag = tags['$[]']("item");
            if ($truthy(list_tag)) {
              
              result['$<<']("<" + (list_tag) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
              if ($truthy(node['$title?']())) {
                result['$<<']("<title>" + (node.$title()) + "</title>");
              }          }          $send(node.$items(), 'each', [], function $$5(terms, dd){
              
              if (terms == null) terms = nil;
              if (dd == null) dd = nil;
              result['$<<']("<" + (entry_tag) + ">");
              if ($truthy(label_tag)) {
                result['$<<']("<" + (label_tag) + ">");
              }            $send(terms, 'each', [], function $$6(dt){
                
                if (dt == null) dt = nil;
                return result['$<<']("<" + (term_tag) + ">" + (dt.$text()) + "</" + (term_tag) + ">");});
              if ($truthy(label_tag)) {
                result['$<<']("</" + (label_tag) + ">");
              }            result['$<<']("<" + (item_tag) + ">");
              if ($truthy(dd)) {
                
                if ($truthy(dd['$text?']())) {
                  result['$<<']("<simpara>" + (dd.$text()) + "</simpara>");
                }              if ($truthy(dd['$blocks?']())) {
                  result['$<<'](dd.$content());
                }            }            result['$<<']("</" + (item_tag) + ">");
              return result['$<<']("</" + (entry_tag) + ">");});
            if ($truthy(list_tag)) {
              result['$<<']("</" + (list_tag) + ">");
            }        }        return result.$join($$('LF'));
        });
        
        $def(self, '$convert_example', function $$convert_example(node) {
          var self = this;

          if ($truthy(node['$title?']())) {
            return "<example" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (self.$enclose_content(node)) + "\n" + "</example>"
          } else {
            return "<informalexample" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$enclose_content(node)) + "\n" + "</informalexample>"
          }
        });
        
        $def(self, '$convert_floating_title', function $$convert_floating_title(node) {
          var self = this;

          return "<bridgehead" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " renderas=\"sect" + (node.$level()) + "\">" + (node.$title()) + "</bridgehead>"
        });
        
        $def(self, '$convert_image', function $$convert_image(node) {
          var self = this, width_attribute = nil, depth_attribute = nil, scale_attribute = nil, align_attribute = nil, mediaobject = nil;

          
          if ($truthy(node['$attr?']("scaledwidth"))) {
            
            width_attribute = " width=\"" + (node.$attr("scaledwidth")) + "\"";
            depth_attribute = "";
            scale_attribute = "";
          } else if ($truthy(node['$attr?']("scale"))) {
            scale_attribute = " scale=\"" + (node.$attr("scale")) + "\"";
          } else {
            
            width_attribute = ($truthy(node['$attr?']("width")) ? (" contentwidth=\"" + (node.$attr("width")) + "\"") : (""));
            depth_attribute = ($truthy(node['$attr?']("height")) ? (" contentdepth=\"" + (node.$attr("height")) + "\"") : (""));
            scale_attribute = "";
          }        align_attribute = ($truthy(node['$attr?']("align")) ? (" align=\"" + (node.$attr("align")) + "\"") : (""));
          mediaobject = "<mediaobject>\n" + "<imageobject>\n" + "<imagedata fileref=\"" + (node.$image_uri(node.$attr("target"))) + "\"" + (width_attribute) + (depth_attribute) + (scale_attribute) + (align_attribute) + "/>\n" + "</imageobject>\n" + "<textobject><phrase>" + (node.$alt()) + "</phrase></textobject>\n" + "</mediaobject>";
          if ($truthy(node['$title?']())) {
            return "<figure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (mediaobject) + "\n" + "</figure>"
          } else {
            return "<informalfigure" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (mediaobject) + "\n" + "</informalfigure>"
          }      });
        
        $def(self, '$convert_listing', function $$convert_listing(node) {
          var self = this, informal = nil, common_attrs = nil, attrs = nil, numbering_attrs = nil, wrapped_content = nil;

          
          informal = node['$title?']()['$!']();
          common_attrs = self.$common_attributes(node.$id(), node.$role(), node.$reftext());
          if ($eqeq(node.$style(), "source")) {
            
            if ($truthy((attrs = node.$attributes())['$key?']("linenums"))) {
              numbering_attrs = ($truthy(attrs['$key?']("start")) ? (" linenumbering=\"numbered\" startinglinenumber=\"" + (attrs['$[]']("start").$to_i()) + "\"") : (" linenumbering=\"numbered\""));
            } else {
              numbering_attrs = " linenumbering=\"unnumbered\"";
            }          if ($truthy(attrs['$key?']("language"))) {
              wrapped_content = "<programlisting" + (($truthy(informal) ? (common_attrs) : (""))) + " language=\"" + (attrs['$[]']("language")) + "\"" + (numbering_attrs) + ">" + (node.$content()) + "</programlisting>";
            } else {
              wrapped_content = "<screen" + (($truthy(informal) ? (common_attrs) : (""))) + (numbering_attrs) + ">" + (node.$content()) + "</screen>";
            }        } else {
            wrapped_content = "<screen" + (($truthy(informal) ? (common_attrs) : (""))) + ">" + (node.$content()) + "</screen>";
          }        if ($truthy(informal)) {
            return wrapped_content
          } else {
            return "<formalpara" + (common_attrs) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>\n" + (wrapped_content) + "\n" + "</para>\n" + "</formalpara>"
          }      });
        
        $def(self, '$convert_literal', function $$convert_literal(node) {
          var self = this;

          if ($truthy(node['$title?']())) {
            return "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>\n" + "<literallayout class=\"monospaced\">" + (node.$content()) + "</literallayout>\n" + "</para>\n" + "</formalpara>"
          } else {
            return "<literallayout" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + " class=\"monospaced\">" + (node.$content()) + "</literallayout>"
          }
        });
        $alias(self, "convert_pass", "content_only");
        
        $def(self, '$convert_stem', function $$convert_stem(node) {
          var self = this, idx = nil, equation = nil, equation_data = nil;

          
          if ($truthy((idx = node.$subs().$index("specialcharacters")))) {
            
            node.$subs().$delete_at(idx);
            equation = node.$content();
            if ($truthy($rb_gt(idx, 0))) {
              
              node.$subs().$insert(idx, "specialcharacters");
            } else {
              
              node.$subs().$unshift("specialcharacters");
            }        } else {
            equation = node.$content();
          }        if ($eqeq(node.$style(), "asciimath")) {
            equation_data = ($truthy(self['$asciimath_available?']()) ? ($$$('AsciiMath').$parse(equation).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))) : ("<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>"));
          } else {
            equation_data = "<alt><![CDATA[" + (equation) + "]]></alt>\n" + "<mathphrase><![CDATA[" + (equation) + "]]></mathphrase>";
          }        if ($truthy(node['$title?']())) {
            return "<equation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + (equation_data) + "\n" + "</equation>"
          } else {
            return "<informalequation" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (equation_data) + "\n" + "</informalequation>"
          }      });
        
        $def(self, '$convert_olist', function $$convert_olist(node) {
          var self = this, result = nil, num_attribute = nil, start_attribute = nil;

          
          result = [];
          num_attribute = ($truthy(node.$style()) ? (" numeration=\"" + (node.$style()) + "\"") : (""));
          start_attribute = ($truthy(node['$attr?']("start")) ? (" startingnumber=\"" + (node.$attr("start")) + "\"") : (""));
          result['$<<']("<orderedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (num_attribute) + (start_attribute) + ">");
          if ($truthy(node['$title?']())) {
            result['$<<']("<title>" + (node.$title()) + "</title>");
          }        $send(node.$items(), 'each', [], function $$7(item){var self = $$7.$$s == null ? this : $$7.$$s;

            
            if (item == null) item = nil;
            result['$<<']("<listitem" + (self.$common_attributes(item.$id(), item.$role())) + ">");
            result['$<<']("<simpara>" + (item.$text()) + "</simpara>");
            if ($truthy(item['$blocks?']())) {
              result['$<<'](item.$content());
            }          return result['$<<']("</listitem>");}, {$$s: self});
          result['$<<']("</orderedlist>");
          return result.$join($$('LF'));
        });
        
        $def(self, '$convert_open', function $$convert_open(node) {
          var self = this, id = nil, reftext = nil, role = nil, content_spacer = nil;

          
          switch (node.$style()) {
            case "abstract":
              if (($eqeq(node.$parent(), node.$document()) && ($eqeq(node.$document().$doctype(), "book")))) {
                
                self.$logger().$warn("abstract block cannot be used in a document without a title when doctype is book. Excluding block content.");
                return "";
              } else {
                return "<abstract>\n" + (self.$title_tag(node)) + (self.$enclose_content(node)) + "\n" + "</abstract>"
              }
            case "partintro":
              if ((($eqeq(node.$level(), 0) && ($eqeq(node.$parent().$context(), "section"))) && ($eqeq(node.$document().$doctype(), "book")))) {
                return "<partintro" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$enclose_content(node)) + "\n" + "</partintro>"
              } else {
                
                self.$logger().$error("partintro block can only be used when doctype is book and must be a child of a book part. Excluding block content.");
                return "";
              }
            default:
              
              if ($truthy((id = node.$id()))) {
                reftext = node.$reftext();
              }            role = node.$role();
              if ($truthy(node['$title?']())) {
                return "<formalpara" + (self.$common_attributes(id, role, reftext)) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>" + ((content_spacer = ($eqeq(node.$content_model(), "compound") ? ($$('LF')) : ("")))) + (node.$content()) + (content_spacer) + "</para>\n" + "</formalpara>"
              } else if (($truthy(id) || ($truthy(role)))) {
                if ($eqeq(node.$content_model(), "compound")) {
                  return "<para" + (self.$common_attributes(id, role, reftext)) + ">\n" + (node.$content()) + "\n" + "</para>"
                } else {
                  return "<simpara" + (self.$common_attributes(id, role, reftext)) + ">" + (node.$content()) + "</simpara>"
                }
              } else {
                return self.$enclose_content(node)
              }        }
        });
        
        $def(self, '$convert_page_break', $return_val("<simpara><?asciidoc-pagebreak?></simpara>"));
        
        $def(self, '$convert_paragraph', function $$convert_paragraph(node) {
          var self = this;

          if ($truthy(node['$title?']())) {
            return "<formalpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + "<title>" + (node.$title()) + "</title>\n" + "<para>" + (node.$content()) + "</para>\n" + "</formalpara>"
          } else {
            return "<simpara" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">" + (node.$content()) + "</simpara>"
          }
        });
        
        $def(self, '$convert_preamble', function $$convert_preamble(node) {
          var self = this;

          if ($eqeq(node.$document().$doctype(), "book")) {
            return "<preface" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node, false)) + (node.$content()) + "\n" + "</preface>"
          } else {
            return node.$content()
          }
        });
        
        $def(self, '$convert_quote', function $$convert_quote(node) {
          var self = this, $ret_or_1 = nil;

          return $send(self, 'blockquote_tag', [node, ($truthy(($ret_or_1 = node['$has_role?']("epigraph"))) ? ("epigraph") : ($ret_or_1))], function $$8(){var self = $$8.$$s == null ? this : $$8.$$s;

            return self.$enclose_content(node)}, {$$s: self})
        });
        
        $def(self, '$convert_thematic_break', $return_val("<simpara><?asciidoc-hr?></simpara>"));
        
        $def(self, '$convert_sidebar', function $$convert_sidebar(node) {
          var self = this;

          return "<sidebar" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">\n" + (self.$title_tag(node)) + (self.$enclose_content(node)) + "\n" + "</sidebar>"
        });
        
        $def(self, '$convert_table', function $$convert_table(node) {
          var self = this, has_body = nil, result = nil, pgwide_attribute = nil, frame = nil, grid = nil, tag_name = nil, width = nil, col_width_key = nil;

          
          has_body = false;
          result = [];
          pgwide_attribute = ($truthy(node['$option?']("pgwide")) ? (" pgwide=\"1\"") : (""));
          if ($eqeq((frame = node.$attr("frame", "all", "table-frame")), "ends")) {
            frame = "topbot";
          }        grid = node.$attr("grid", nil, "table-grid");
          result['$<<']("<" + ((tag_name = ($truthy(node['$title?']()) ? ("table") : ("informaltable")))) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (pgwide_attribute) + " frame=\"" + (frame) + "\" rowsep=\"" + (($truthy(["none", "cols"]['$include?'](grid)) ? (0) : (1))) + "\" colsep=\"" + (($truthy(["none", "rows"]['$include?'](grid)) ? (0) : (1))) + "\"" + (($truthy(node['$attr?']("orientation", "landscape", "table-orientation")) ? (" orient=\"land\"") : (""))) + ">");
          if ($truthy(node['$option?']("unbreakable"))) {
            result['$<<']("<?dbfo keep-together=\"always\"?>");
          } else if ($truthy(node['$option?']("breakable"))) {
            result['$<<']("<?dbfo keep-together=\"auto\"?>");
          }        if ($eqeq(tag_name, "table")) {
            result['$<<']("<title>" + (node.$title()) + "</title>");
          }        if ($truthy((width = ($truthy(node['$attr?']("width")) ? (node.$attr("width")) : (nil))))) {
            
            $send($$('TABLE_PI_NAMES'), 'each', [], function $$9(pi_name){
              
              if (pi_name == null) pi_name = nil;
              return result['$<<']("<?" + (pi_name) + " table-width=\"" + (width) + "\"?>");});
            col_width_key = "colabswidth";
          } else {
            col_width_key = "colpcwidth";
          }        result['$<<']("<tgroup cols=\"" + (node.$attr("colcount")) + "\">");
          $send(node.$columns(), 'each', [], function $$10(col){
            
            if (col == null) col = nil;
            return result['$<<']("<colspec colname=\"col_" + (col.$attr("colnumber")) + "\" colwidth=\"" + (col.$attr(col_width_key)) + "*\"/>");});
          $send(node.$rows().$to_h(), 'each', [], function $$11(tsec, rows){
            
            if (tsec == null) tsec = nil;
            if (rows == null) rows = nil;
            if ($truthy(rows['$empty?']())) {
              return nil
            }          if ($eqeq(tsec, "body")) {
              has_body = true;
            }          result['$<<']("<t" + (tsec) + ">");
            $send(rows, 'each', [], function $$12(row){
              
              if (row == null) row = nil;
              result['$<<']("<row>");
              $send(row, 'each', [], function $$13(cell){var colspan_attribute = nil, colnum = nil, rowspan_attribute = nil, entry_start = nil, cell_content = nil, entry_end = nil;

                
                if (cell == null) cell = nil;
                colspan_attribute = ($truthy(cell.$colspan()) ? (" namest=\"col_" + ((colnum = cell.$column().$attr("colnumber"))) + "\" nameend=\"col_" + ($rb_minus($rb_plus(colnum, cell.$colspan()), 1)) + "\"") : (""));
                rowspan_attribute = ($truthy(cell.$rowspan()) ? (" morerows=\"" + ($rb_minus(cell.$rowspan(), 1)) + "\"") : (""));
                entry_start = "<entry align=\"" + (cell.$attr("halign")) + "\" valign=\"" + (cell.$attr("valign")) + "\"" + (colspan_attribute) + (rowspan_attribute) + ">";
                if ($eqeq(tsec, "head")) {
                  cell_content = cell.$text();
                } else 
                switch (cell.$style()) {
                  case "asciidoc":
                    cell_content = cell.$content();
                    break;
                  case "literal":
                    cell_content = "<literallayout class=\"monospaced\">" + (cell.$text()) + "</literallayout>";
                    break;
                  case "header":
                    cell_content = ($truthy((cell_content = cell.$content())['$empty?']()) ? ("") : ("<simpara><emphasis role=\"strong\">" + (cell_content.$join("</emphasis></simpara><simpara><emphasis role=\"strong\">")) + "</emphasis></simpara>"));
                    break;
                  default:
                    cell_content = ($truthy((cell_content = cell.$content())['$empty?']()) ? ("") : ("<simpara>" + (cell_content.$join("</simpara><simpara>")) + "</simpara>"));
                }              entry_end = ($truthy(node.$document()['$attr?']("cellbgcolor")) ? ("<?dbfo bgcolor=\"" + (node.$document().$attr("cellbgcolor")) + "\"?></entry>") : ("</entry>"));
                return result['$<<']("" + (entry_start) + (cell_content) + (entry_end));});
              return result['$<<']("</row>");});
            return result['$<<']("</t" + (tsec) + ">");});
          result['$<<']("</tgroup>");
          result['$<<']("</" + (tag_name) + ">");
          if (!$truthy(has_body)) {
            self.$logger().$warn("tables must have at least one body row");
          }        return result.$join($$('LF'));
        });
        $alias(self, "convert_toc", "skip");
        
        $def(self, '$convert_ulist', function $$convert_ulist(node) {
          var self = this, result = nil, mark_type = nil, checklist = nil, mark_attribute = nil;

          
          result = [];
          if ($eqeq(node.$style(), "bibliography")) {
            
            result['$<<']("<bibliodiv" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">");
            if ($truthy(node['$title?']())) {
              result['$<<']("<title>" + (node.$title()) + "</title>");
            }          $send(node.$items(), 'each', [], function $$14(item){
              
              if (item == null) item = nil;
              result['$<<']("<bibliomixed>");
              result['$<<']("<bibliomisc>" + (item.$text()) + "</bibliomisc>");
              if ($truthy(item['$blocks?']())) {
                result['$<<'](item.$content());
              }            return result['$<<']("</bibliomixed>");});
            result['$<<']("</bibliodiv>");
          } else {
            
            mark_type = ($truthy((checklist = node['$option?']("checklist"))) ? ("none") : (node.$style()));
            mark_attribute = ($truthy(mark_type) ? (" mark=\"" + (mark_type) + "\"") : (""));
            result['$<<']("<itemizedlist" + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + (mark_attribute) + ">");
            if ($truthy(node['$title?']())) {
              result['$<<']("<title>" + (node.$title()) + "</title>");
            }          $send(node.$items(), 'each', [], function $$15(item){var self = $$15.$$s == null ? this : $$15.$$s, text_marker = nil, $ret_or_1 = nil;

              
              if (item == null) item = nil;
              if (($truthy(checklist) && ($truthy(item['$attr?']("checkbox"))))) {
                text_marker = ($truthy(item['$attr?']("checked")) ? ("&#10003; ") : ("&#10063; "));
              }            result['$<<']("<listitem" + (self.$common_attributes(item.$id(), item.$role())) + ">");
              result['$<<']("<simpara>" + (($truthy(($ret_or_1 = text_marker)) ? ($ret_or_1) : (""))) + (item.$text()) + "</simpara>");
              if ($truthy(item['$blocks?']())) {
                result['$<<'](item.$content());
              }            return result['$<<']("</listitem>");}, {$$s: self});
            result['$<<']("</itemizedlist>");
          }        return result.$join($$('LF'));
        });
        
        $def(self, '$convert_verse', function $$convert_verse(node) {
          var self = this, $ret_or_1 = nil;

          return $send(self, 'blockquote_tag', [node, ($truthy(($ret_or_1 = node['$has_role?']("epigraph"))) ? ("epigraph") : ($ret_or_1))], function $$16(){
            return "<literallayout>" + (node.$content()) + "</literallayout>"})
        });
        $alias(self, "convert_video", "skip");
        
        $def(self, '$convert_inline_anchor', function $$convert_inline_anchor(node) {
          var $a, self = this, id = nil, $ret_or_2 = nil, path = nil, linkend = nil, root_doc = nil, text = nil;

          
          switch (node.$type()) {
            case "ref":
              return "<anchor" + (self.$common_attributes((id = node.$id()), nil, ($truthy(($ret_or_2 = node.$reftext())) ? ($ret_or_2) : ("[" + (id) + "]")))) + "/>"
            case "xref":
              if ($truthy((path = node.$attributes()['$[]']("path")))) {
                return "<link xl:href=\"" + (node.$target()) + "\">" + (($truthy(($ret_or_2 = node.$text())) ? ($ret_or_2) : (path))) + "</link>"
              } else {
                
                if ($truthy((linkend = node.$attributes()['$[]']("refid"))['$nil_or_empty?']())) {
                  
                  root_doc = self.$get_root_document(node);
                  linkend = ($truthy(($ret_or_2 = root_doc.$id())) ? ($ret_or_2) : (($a = [self.$generate_document_id(root_doc)], $send(root_doc, 'id=', $a), $a[$a.length - 1])));
                }              if ($truthy((text = node.$text()))) {
                  return "<link linkend=\"" + (linkend) + "\">" + (text) + "</link>"
                } else {
                  return "<xref linkend=\"" + (linkend) + "\"/>"
                }            }
            case "link":
              return "<link xl:href=\"" + (node.$target()) + "\">" + (node.$text()) + "</link>"
            case "bibref":
              return "<anchor" + (self.$common_attributes(node.$id(), nil, (text = "[" + (($truthy(($ret_or_2 = node.$reftext())) ? ($ret_or_2) : (node.$id()))) + "]"))) + "/>" + (text)
            default:
              
              self.$logger().$warn("unknown anchor type: " + (node.$type().$inspect()));
              return nil;
          }
        });
        
        $def(self, '$convert_inline_break', function $$convert_inline_break(node) {
          
          return "" + (node.$text()) + "<?asciidoc-br?>"
        });
        
        $def(self, '$convert_inline_button', function $$convert_inline_button(node) {
          
          return "<guibutton>" + (node.$text()) + "</guibutton>"
        });
        
        $def(self, '$convert_inline_callout', function $$convert_inline_callout(node) {
          var self = this;

          return "<co" + (self.$common_attributes(node.$id())) + "/>"
        });
        
        $def(self, '$convert_inline_footnote', function $$convert_inline_footnote(node) {
          var self = this;

          if ($eqeq(node.$type(), "xref")) {
            return "<footnoteref linkend=\"" + (node.$target()) + "\"/>"
          } else {
            return "<footnote" + (self.$common_attributes(node.$id())) + "><simpara>" + (node.$text()) + "</simpara></footnote>"
          }
        });
        
        $def(self, '$convert_inline_image', function $$convert_inline_image(node) {
          var self = this, width_attribute = nil, depth_attribute = nil;

          
          width_attribute = ($truthy(node['$attr?']("width")) ? (" contentwidth=\"" + (node.$attr("width")) + "\"") : (""));
          depth_attribute = ($truthy(node['$attr?']("height")) ? (" contentdepth=\"" + (node.$attr("height")) + "\"") : (""));
          return "<inlinemediaobject" + (self.$common_attributes(nil, node.$role())) + ">\n" + "<imageobject>\n" + "<imagedata fileref=\"" + (($eqeq(node.$type(), "icon") ? (node.$icon_uri(node.$target())) : (node.$image_uri(node.$target())))) + "\"" + (width_attribute) + (depth_attribute) + "/>\n" + "</imageobject>\n" + "<textobject><phrase>" + (node.$alt()) + "</phrase></textobject>\n" + "</inlinemediaobject>";
        });
        
        $def(self, '$convert_inline_indexterm', function $$convert_inline_indexterm(node) {
          var see = nil, rel = nil, see_also_list = nil, numterms = nil, terms = nil;

          
          if ($truthy((see = node.$attr("see")))) {
            rel = "\n<see>" + (see) + "</see>";
          } else if ($truthy((see_also_list = node.$attr("see-also")))) {
            rel = $send(see_also_list, 'map', [], function $$17(see_also){
              
              if (see_also == null) see_also = nil;
              return "\n<seealso>" + (see_also) + "</seealso>";}).$join();
          } else {
            rel = "";
          }        if ($eqeq(node.$type(), "visible")) {
            return "<indexterm>\n" + "<primary>" + (node.$text()) + "</primary>" + (rel) + "\n" + "</indexterm>" + (node.$text())
          } else if ($truthy($rb_gt((numterms = (terms = node.$attr("terms")).$size()), 2))) {
            return "<indexterm>\n" + "<primary>" + (terms['$[]'](0)) + "</primary><secondary>" + (terms['$[]'](1)) + "</secondary><tertiary>" + (terms['$[]'](2)) + "</tertiary>" + (rel) + "\n" + "</indexterm>" + (($truthy(node.$document()['$option?']("indexterm-promotion")) ? ("\n" + "<indexterm>\n" + "<primary>" + (terms['$[]'](1)) + "</primary><secondary>" + (terms['$[]'](2)) + "</secondary>\n" + "</indexterm>\n" + "<indexterm>\n" + "<primary>" + (terms['$[]'](2)) + "</primary>\n" + "</indexterm>") : ("")))
          } else if ($truthy($rb_gt(numterms, 1))) {
            return "<indexterm>\n" + "<primary>" + (terms['$[]'](0)) + "</primary><secondary>" + (terms['$[]'](1)) + "</secondary>" + (rel) + "\n" + "</indexterm>" + (($truthy(node.$document()['$option?']("indexterm-promotion")) ? ("\n" + "<indexterm>\n" + "<primary>" + (terms['$[]'](1)) + "</primary>\n" + "</indexterm>") : ("")))
          } else {
            return "<indexterm>\n" + "<primary>" + (terms['$[]'](0)) + "</primary>" + (rel) + "\n" + "</indexterm>"
          }      });
        
        $def(self, '$convert_inline_kbd', function $$convert_inline_kbd(node) {
          var keys = nil;

          if ($eqeq((keys = node.$attr("keys")).$size(), 1)) {
            return "<keycap>" + (keys['$[]'](0)) + "</keycap>"
          } else {
            return "<keycombo><keycap>" + (keys.$join("</keycap><keycap>")) + "</keycap></keycombo>"
          }
        });
        
        $def(self, '$convert_inline_menu', function $$convert_inline_menu(node) {
          var menu = nil, submenus = nil, menuitem = nil;

          
          menu = node.$attr("menu");
          if ($truthy((submenus = node.$attr("submenus"))['$empty?']())) {
            if ($truthy((menuitem = node.$attr("menuitem")))) {
              return "<menuchoice><guimenu>" + (menu) + "</guimenu> <guimenuitem>" + (menuitem) + "</guimenuitem></menuchoice>"
            } else {
              return "<guimenu>" + (menu) + "</guimenu>"
            }
          } else {
            return "<menuchoice><guimenu>" + (menu) + "</guimenu> <guisubmenu>" + (submenus.$join("</guisubmenu> <guisubmenu>")) + "</guisubmenu> <guimenuitem>" + (node.$attr("menuitem")) + "</guimenuitem></menuchoice>"
          }      });
        
        $def(self, '$convert_inline_quoted', function $$convert_inline_quoted(node) {
          var $a, $b, self = this, type = nil, equation = nil, open = nil, close = nil, supports_phrase = nil, text = nil, quoted_text = nil;

          if ($eqeq((type = node.$type()), "asciimath")) {
            if ($truthy(self['$asciimath_available?']())) {
              return "<inlineequation>" + ($$$('AsciiMath').$parse(node.$text()).$to_mathml("mml:", $hash2(["xmlns:mml"], {"xmlns:mml": "http://www.w3.org/1998/Math/MathML"}))) + "</inlineequation>"
            } else {
              return "<inlineequation><mathphrase><![CDATA[" + (node.$text()) + "]]></mathphrase></inlineequation>"
            }
          } else if ($eqeq(type, "latexmath")) {
            return "<inlineequation><alt><![CDATA[" + ((equation = node.$text())) + "]]></alt><mathphrase><![CDATA[" + (equation) + "]]></mathphrase></inlineequation>"
          } else {
            
            $b = $$('QUOTE_TAGS')['$[]'](type), $a = $to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), (supports_phrase = ($a[2] == null ? nil : $a[2]));
            text = node.$text();
            if ($truthy(node.$role())) {
              if ($truthy(supports_phrase)) {
                quoted_text = "" + (open) + "<phrase role=\"" + (node.$role()) + "\">" + (text) + "</phrase>" + (close);
              } else {
                quoted_text = "" + (open.$chop()) + " role=\"" + (node.$role()) + "\">" + (text) + (close);
              }
            } else {
              quoted_text = "" + (open) + (text) + (close);
            }          if ($truthy(node.$id())) {
              return "<anchor" + (self.$common_attributes(node.$id(), nil, text)) + "/>" + (quoted_text)
            } else {
              return quoted_text
            }        }
        });
        self.$private();
        
        $def(self, '$common_attributes', function $$common_attributes(id, role, reftext) {
          var attrs = nil;

          
          if (role == null) role = nil;
          if (reftext == null) reftext = nil;
          if ($truthy(id)) {
            attrs = " xml:id=\"" + (id) + "\"" + (($truthy(role) ? (" role=\"" + (role) + "\"") : ("")));
          } else if ($truthy(role)) {
            attrs = " role=\"" + (role) + "\"";
          } else {
            attrs = "";
          }        if ($truthy(reftext)) {
            
            if (($truthy(reftext['$include?']("<")) && ($truthy((reftext = reftext.$gsub($$('XmlSanitizeRx'), ""))['$include?'](" "))))) {
              reftext = reftext.$squeeze(" ").$strip();
            }          if ($truthy(reftext['$include?']("\""))) {
              reftext = reftext.$gsub("\"", "&quot;");
            }          return "" + (attrs) + " xreflabel=\"" + (reftext) + "\"";
          } else {
            return attrs
          }      }, -2);
        
        $def(self, '$author_tag', function $$author_tag(doc, author) {
          var result = nil;

          
          result = [];
          result['$<<']("<author>");
          result['$<<']("<personname>");
          if ($truthy(author.$firstname())) {
            result['$<<']("<firstname>" + (doc.$sub_replacements(author.$firstname())) + "</firstname>");
          }        if ($truthy(author.$middlename())) {
            result['$<<']("<othername>" + (doc.$sub_replacements(author.$middlename())) + "</othername>");
          }        if ($truthy(author.$lastname())) {
            result['$<<']("<surname>" + (doc.$sub_replacements(author.$lastname())) + "</surname>");
          }        result['$<<']("</personname>");
          if ($truthy(author.$email())) {
            result['$<<']("<email>" + (author.$email()) + "</email>");
          }        result['$<<']("</author>");
          return result.$join($$('LF'));
        });
        
        $def(self, '$document_info_tag', function $$document_info_tag(doc) {
          var $a, self = this, result = nil, title = nil, date = nil, authors = nil, author = nil, back_cover_tag = nil, front_cover_tag = nil, docinfo_content = nil;

          
          result = ["<info>"];
          if (!$truthy(doc.$notitle())) {
            if ($truthy((title = doc.$doctitle($hash2(["partition", "use_fallback"], {"partition": true, "use_fallback": true})))['$subtitle?']())) {
              result['$<<']("<title>" + (title.$main()) + "</title>\n" + "<subtitle>" + (title.$subtitle()) + "</subtitle>");
            } else {
              result['$<<']("<title>" + (title) + "</title>");
            }
          }        if ($truthy((date = ($truthy(doc['$attr?']("revdate")) ? (doc.$attr("revdate")) : (($truthy(doc['$attr?']("reproducible")) ? (nil) : (doc.$attr("docdate")))))))) {
            result['$<<']("<date>" + (date) + "</date>");
          }        if ($truthy(doc['$attr?']("copyright"))) {
            
            $$('CopyrightRx')['$=~'](doc.$attr("copyright"));
            result['$<<']("<copyright>");
            result['$<<']("<holder>" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + "</holder>");
            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {
              result['$<<']("<year>" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + "</year>");
            }          result['$<<']("</copyright>");
          }        if ($truthy(doc['$header?']())) {
            
            if (!$truthy((authors = doc.$authors())['$empty?']())) {
              if ($truthy($rb_gt(authors.$size(), 1))) {
                
                result['$<<']("<authorgroup>");
                $send(authors, 'each', [], function $$18(author){var self = $$18.$$s == null ? this : $$18.$$s;

                  
                  if (author == null) author = nil;
                  return result['$<<'](self.$author_tag(doc, author));}, {$$s: self});
                result['$<<']("</authorgroup>");
              } else {
                
                result['$<<'](self.$author_tag(doc, (author = authors['$[]'](0))));
                if ($truthy(author.$initials())) {
                  result['$<<']("<authorinitials>" + (author.$initials()) + "</authorinitials>");
                }            }
            }          if (($truthy(doc['$attr?']("revdate")) && (($truthy(doc['$attr?']("revnumber")) || ($truthy(doc['$attr?']("revremark"))))))) {
              
              result['$<<']("<revhistory>\n" + "<revision>");
              if ($truthy(doc['$attr?']("revnumber"))) {
                result['$<<']("<revnumber>" + (doc.$attr("revnumber")) + "</revnumber>");
              }            if ($truthy(doc['$attr?']("revdate"))) {
                result['$<<']("<date>" + (doc.$attr("revdate")) + "</date>");
              }            if ($truthy(doc['$attr?']("authorinitials"))) {
                result['$<<']("<authorinitials>" + (doc.$attr("authorinitials")) + "</authorinitials>");
              }            if ($truthy(doc['$attr?']("revremark"))) {
                result['$<<']("<revremark>" + (doc.$attr("revremark")) + "</revremark>");
              }            result['$<<']("</revision>\n" + "</revhistory>");
            }          if (($truthy(doc['$attr?']("front-cover-image")) || ($truthy(doc['$attr?']("back-cover-image"))))) {
              if ($truthy((back_cover_tag = self.$cover_tag(doc, "back")))) {
                
                result['$<<'](self.$cover_tag(doc, "front", true));
                result['$<<'](back_cover_tag);
              } else if ($truthy((front_cover_tag = self.$cover_tag(doc, "front")))) {
                result['$<<'](front_cover_tag);
              }
            }          if ($truthy(doc['$attr?']("orgname"))) {
              result['$<<']("<orgname>" + (doc.$attr("orgname")) + "</orgname>");
            }          if (!$truthy((docinfo_content = doc.$docinfo())['$empty?']())) {
              result['$<<'](docinfo_content);
            }        }        result['$<<']("</info>");
          return result.$join($$('LF'));
        });
        
        $def(self, '$get_root_document', function $$get_root_document(node) {
          
          
          while ($truthy((node = node.$document())['$nested?']())) {
          node = node.$parent_document();
          }        return node;
        });
        
        $def(self, '$generate_document_id', function $$generate_document_id(doc) {
          
          return "__" + (doc.$doctype()) + "-root__"
        });
        
        $def(self, '$enclose_content', function $$enclose_content(node) {
          
          if ($eqeq(node.$content_model(), "compound")) {
            return node.$content()
          } else {
            return "<simpara>" + (node.$content()) + "</simpara>"
          }
        });
        
        $def(self, '$title_tag', function $$title_tag(node, optional) {
          
          
          if (optional == null) optional = true;
          if (($not(optional) || ($truthy(node['$title?']())))) {
            return "<title>" + (node.$title()) + "</title>\n"
          } else {
            return ""
          }      }, -2);
        
        $def(self, '$cover_tag', function $$cover_tag(doc, face, use_placeholder) {
          var $a, cover_image = nil, width_attr = nil, depth_attr = nil, attrlist = nil, attrs = nil;

          
          if (use_placeholder == null) use_placeholder = false;
          if ($truthy((cover_image = doc.$attr("" + (face) + "-cover-image")))) {
            
            width_attr = "";
            depth_attr = "";
            if (($truthy(cover_image['$include?'](":")) && ($truthy($$('ImageMacroRx')['$=~'](cover_image))))) {
              
              attrlist = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));
              cover_image = doc.$image_uri((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)));
              if ($truthy(attrlist)) {
                
                attrs = $$('AttributeList').$new(attrlist).$parse(["alt", "width", "height"]);
                if ($truthy(attrs['$key?']("scaledwidth"))) {
                  width_attr = " width=\"" + (attrs['$[]']("scaledwidth")) + "\"";
                } else {
                  
                  if ($truthy(attrs['$key?']("width"))) {
                    width_attr = " contentwidth=\"" + (attrs['$[]']("width")) + "\"";
                  }                if ($truthy(attrs['$key?']("height"))) {
                    depth_attr = " contentdepth=\"" + (attrs['$[]']("height")) + "\"";
                  }              }            }          }          return "<cover role=\"" + (face) + "\">\n" + "<mediaobject>\n" + "<imageobject>\n" + "<imagedata fileref=\"" + (cover_image) + "\"" + (width_attr) + (depth_attr) + "/>\n" + "</imageobject>\n" + "</mediaobject>\n" + "</cover>";
          } else if ($truthy(use_placeholder)) {
            return "<cover role=\"" + (face) + "\"/>"
          } else {
            return nil
          }      }, -3);
        
        $def(self, '$blockquote_tag', function $$blockquote_tag(node, tag_name) {
          var $a, $yield = $$blockquote_tag.$$p || nil, self = this, start_tag = nil, end_tag = nil, result = nil;

          $$blockquote_tag.$$p = null;
          
          if (tag_name == null) tag_name = nil;
          if ($truthy(tag_name)) {
            $a = ["<" + (tag_name), "</" + (tag_name) + ">"], (start_tag = $a[0]), (end_tag = $a[1]);
          } else {
            $a = ["<blockquote", "</blockquote>"], (start_tag = $a[0]), (end_tag = $a[1]);
          }        result = ["" + (start_tag) + (self.$common_attributes(node.$id(), node.$role(), node.$reftext())) + ">"];
          if ($truthy(node['$title?']())) {
            result['$<<']("<title>" + (node.$title()) + "</title>");
          }        if (($truthy(node['$attr?']("attribution")) || ($truthy(node['$attr?']("citetitle"))))) {
            
            result['$<<']("<attribution>");
            if ($truthy(node['$attr?']("attribution"))) {
              result['$<<'](node.$attr("attribution"));
            }          if ($truthy(node['$attr?']("citetitle"))) {
              result['$<<']("<citetitle>" + (node.$attr("citetitle")) + "</citetitle>");
            }          result['$<<']("</attribution>");
          }        result['$<<'](Opal.yieldX($yield, []));
          result['$<<'](end_tag);
          return result.$join($$('LF'));
        }, -2);
        
        $def(self, '$asciimath_available?', function $DocBook5Converter_asciimath_available$ques$19() {
          var self = this, $ret_or_1 = nil;

          return (self.asciimath_status = ($truthy(($ret_or_1 = self.asciimath_status)) ? ($ret_or_1) : (self.$load_asciimath())))['$==']("loaded")
        });
        return $def(self, '$load_asciimath', function $$load_asciimath() {
          var $a, $b, $c, $d;

          if ($truthy(((($a = $$$('::', 'AsciiMath', 'skip_raise')) && ($b = $a, $b) && ($c = $b) && ((($d = $c.$parse) && !$d.$$stub) || $c['$respond_to_missing?']('parse'))) ? 'method' : nil))) {
            return "loaded"
          } else if ($truthy($$('Helpers').$require_library("asciimath", true, "warn")['$nil?']())) {
            return "unavailable"
          } else {
            return "loaded"
          }
        });
      })($$('Converter'), $$$($$('Converter'), 'Base'), $nesting)
    })($nesting[0], $nesting)
  });

  }

  AsciidoctorDocBook.register = register;

  return AsciidoctorDocBook;

}));
